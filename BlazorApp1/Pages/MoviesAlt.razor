@using BlazorApp1.Models
@using BlazorApp1.Data
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access movieService using @Service
*@
@inherits OwningComponentBase<MovieService>
@inject MovieService MService


@page "/moviesalt"

<PageTitle>MoviesAlt</PageTitle>


<h3>MoviesAlt</h3>
<input placeholder="Title" @bind="newTitle" />
@*<input placeholder="ReleaseDate" @bind="newReleaseDate" />*@
<InputDate @bind-Value=newReleaseDate ParsingErrorMessage="Must be a date" />
<input placeholder="Genre" @bind="newGenre" />
<InputNumber placeholder="Price" @bind-Value=newPrice ParsingErrorMessage="Must be a number" />
<button class="btn btn-secondary" @onclick="AddMovie">Add Movie</button>

@if (movies == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <!-- Show the forecasts for the current user -->
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>ReleaseDate</th>
                <th>Genre</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.ReleaseDate.ToShortDateString()</td>
                    <td>@movie.Genre</td>
                    <td>@movie.Price</td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        <!-- add a new movie to the table-->
        <button class="btn btn-success" @onclick="AddNewMovie">Also Add Movie</button>
    </p>
    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a forecast -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Movie</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                        @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current forecast -->
                    <div class="modal-body">
                        <input class="form-control" type="text"
                       placeholder="title"
                       @bind="newMovieItem.Title" />

                        <InputDate class="form-control" @bind-Value=newMovieItem.ReleaseDate ParsingErrorMessage="Must be a date" />

                        <input class="form-control" type="text"
                       placeholder="genre"
                       @bind="newMovieItem.Genre" />

                        <InputNumber class="form-control" placeholder="Price" @bind-Value=newMovieItem.Price ParsingErrorMessage="Must be a number" />

                        <br />
                        <!-- Button to save the forecast -->
                        <button class="btn btn-success"
                        @onclick="SaveMovie">
                            Save
                        </button>&nbsp;
                    </div>
                </div>
            </div>
        </div>

    }
}



@code {
    //private static List<TodoItem> todos = new();
    //private BlazorApp1.Data.BlazorApp1Context? _context;
    private string? newTitle;
    private DateTime newReleaseDate;
    private string? newGenre;
    private decimal newPrice;
    bool ShowPopup = false;
    Movie newMovieItem = new Movie ();

    List<Movie> movies = new List<Movie>();

    protected override async Task OnInitializedAsync()
    {
            // Get the current user
            /*
            if (authenticationStateTask != null)
            {
            var user = (await authenticationStateTask).User;
                if (user.Identity != null)
                {
                UserIdentityName = user.Identity.Name ?? "";
        }
        }
        */
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        movies = await MService.GetMovieAsync();
    }


    async Task AddMovie()
    {
        if (!string.IsNullOrWhiteSpace(newTitle))
        {
            //var declarations do not use access modifiers in method blocks
            Movie MovieItem = new Movie { Title = newTitle, Genre = newGenre, Price = newPrice , ReleaseDate = newReleaseDate};
            //_context.Movie.Add(newMovieItem);
            //await _context.SaveChangesAsync();

            //todos.Add(newTodoItem);
            // todos.Add(new TodoItem { Title = newTodo});
            //newTodo = string.Empty;
            var result = MService.CreateMovieAsync(MovieItem);
            
        }
        movies = await MService.GetMovieAsync();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewMovie()
    {
        // Make new forecast
        newMovieItem = new Movie();
        // Set Id to 0 so we know it is a new record
        newMovieItem.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveMovie()
    {
        ShowPopup = false;

        if (newMovieItem.Id == 0)
        {
            // Create new forecast
            Movie tempMovieItem = new Movie();
            tempMovieItem.ReleaseDate = newMovieItem.ReleaseDate;
            tempMovieItem.Price = newMovieItem.Price;
            tempMovieItem.Title = newMovieItem.Title;
            tempMovieItem.Genre = newMovieItem.Genre;
            // Save the result
            var result = MService.CreateMovieAsync(tempMovieItem);
        }
        else
        {
            // This is an update
        }
        // Get the forecasts for the current user
        movies = await MService.GetMovieAsync();
    }
}
